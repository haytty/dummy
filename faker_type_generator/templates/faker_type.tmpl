use fake::Fake;
use fake::faker::boolean::raw::Boolean;
use fake::faker::color::raw::*;
use fake::faker::company::raw::*;
use fake::faker::http::raw::*;
use fake::faker::internet::raw::*;
use fake::faker::lorem::raw::*;
use fake::faker::name::raw::*;
use fake::faker::number::raw::*;
use fake::locales::{EN, JA_JP};
use serde_json::{Number, Value};

use crate::error::FakerTypeError;

pub enum FakerType {
    {%- for lower_case, camel_case in faker_types %} 
    {{camel_case}},
    {%- endfor %}
}

impl FakerType {
    pub fn fake(&self) -> Value {
        match self {
            {%- for lower_case, camel_case in string_faker_types %}
            FakerType::{{camel_case}} => {
                Value::String({{camel_case}}(JA_JP).fake())
            } 
            {%- endfor %}
            {%- for lower_case, camel_case in array_faker_types %}
            FakerType::{{camel_case}} => {
                let items: Vec<String> = {{camel_case}}(JA_JP, 3..5).fake();
                Value::Array(items.iter().map(|item| Value::String(item.to_string())).collect())
            } 
            {%- endfor %}
            {%- for lower_case, camel_case in number_faker_types %}
            FakerType::{{camel_case}} => {
                let digit: &str = {{camel_case}}(JA_JP).fake();
                let number = Number::from(digit.parse::<u8>().unwrap());
                Value::Number(number)
            } 
            {%- endfor %}
            FakerType::NumberWithFormat => {
                let n: String = NumberWithFormat(JA_JP, "FLAT 0# ^#/F").fake();
                Value::String(n)
                // let number = Number::from(n.parse::<u32>().unwrap());
                // Value::Number(number)
            }
            FakerType::Boolean => {
                // 50%の割合
                Value::Bool(Boolean(JA_JP, 50).fake())
            }
            _ => {
                Value::String("Undefined".to_string())
            }
        }
    }
}

impl TryFrom<String> for FakerType {
    type Error = FakerTypeError;

    fn try_from(value: String) -> std::result::Result<Self, Self::Error> {
        match value.as_str() {
            {%- for lower_case, camel_case in faker_types %}
            "{{lower_case}}" => Ok(FakerType::{{camel_case}}), 
            {%- endfor %}
            _ => Err(FakerTypeError::InvalidType),
        }
    }
}
